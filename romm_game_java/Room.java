import java.util.Set;import java.util.HashMap;import java.util.Iterator;import java.util.ArrayList;/** * This class is part of the "Haunted House" application.  * "Haunted House" is a very simple, text based adventure game.   *  * Class Room - a room in an adventure game. * A "Room" represents one location in the scenery of the game.   * It is connected to other rooms via exits.   * For each existing exit, the room stores a reference to the neighboring room. * Room stores items connected to class of "item"  *  * @author   Lingkai Huang (21318909) * @version  12/11/2013 */public class Room {    private String description;    private HashMap exits;        // stores exits of this room.            private Item newItem;    private HashMap<String, Room> roomItem;   // stores item of this room.        /**     * Create a room described "description". Initially, it has no exits.     * "description" is something like "in a kitchen" or "in an open court      * yard".     */    public Room(String description)     {        this.description = description;        exits = new HashMap();        newItem = new Item();        roomItem = new HashMap<String, Room>();    }    /**     * Define an exit from this room.     */    public void setExit(String direction, Room neighbor)     {        exits.put(direction, neighbor);    }    /**     * Return the description of the room (the one that was defined in the     * constructor).     */    public String getDescription()    {        return description;    }     /**     * create a item with three elements     * @param item The name of item     * @param room The room with the item     * @param weight The weight of the item     */    public void creatItem(String item, Room room, int weight)    {        newItem.creatItem(item, weight);//stores item with weight        roomItem.put(item, room); //stores item with room    }        /**     * Return a long description of this room, in the form:     *     You are in the kitchen.     *     Exits: north west     */    public String getLongDescription()    {        return "Location: You are " + description + ".\n" + getExitString() +".\n" + getRoomItem();            }        public String getRoomItem()    {        return newItem.itemName()+ "\n";    }            /**     * Return a string describing the room's exits, for example     * "Exits: north west".     */    private String getExitString()    {        String returnString = "Exits:";        Set keys = exits.keySet();        for(Iterator iter = keys.iterator(); iter.hasNext(); )            returnString += " " + iter.next();        return returnString;    }    /**     * Return the room that is reached if we go from this room in direction     * "direction". If there is no room in that direction, return null.     */    public Room getExit(String direction)     {        return (Room)exits.get(direction);    }         /**     * @return the weight of the item     * @param item The name of the tiem     */    public int getWeightRoom(String item)    {        return newItem.getWeight(item);    }        /**     * @return the room through the name of item     * @param item     */    public Room returnRoom(String item)    {        return roomItem.get(item);    }         /**     * @param item      * remove the room with item     */     public void removeRoom(String item)    {        roomItem.remove(item);        newItem.removeItem(item);    }         /**     * @param item      * check if the room contain this item     */     public boolean checkItemInRoom(String item)    {        if(roomItem.containsKey(item))        {            return true;        }        else        {            return false;        }    }    }